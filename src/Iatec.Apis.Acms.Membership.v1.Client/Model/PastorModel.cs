/* 
 * Acms Api
 *
 * The documentation for the ACMS Api
 *
 * OpenAPI spec version: 1.0.1
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Iatec.Apis.Acms.Membership.v1.Client.Model
{
    /// <summary>
    /// PastorModel
    /// </summary>
    [DataContract]
    public partial class PastorModel :  IEquatable<PastorModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PastorModel" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="MainPicture">MainPicture.</param>
        /// <param name="HomePhone">HomePhone.</param>
        /// <param name="MobilePhone">MobilePhone.</param>
        /// <param name="Email">Email.</param>
        /// <param name="IsMainPastor">IsMainPastor.</param>
        /// <param name="AccountsId">AccountsId.</param>
        public PastorModel(Guid? Id = default(Guid?), string Name = default(string), string LastName = default(string), string FullName = default(string), PictureModel MainPicture = default(PictureModel), string HomePhone = default(string), string MobilePhone = default(string), string Email = default(string), bool? IsMainPastor = default(bool?), Guid? AccountsId = default(Guid?))
        {
            this.Id = Id;
            this.Name = Name;
            this.LastName = LastName;
            this.FullName = FullName;
            this.MainPicture = MainPicture;
            this.HomePhone = HomePhone;
            this.MobilePhone = MobilePhone;
            this.Email = Email;
            this.IsMainPastor = IsMainPastor;
            this.AccountsId = AccountsId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }
        /// <summary>
        /// Gets or Sets MainPicture
        /// </summary>
        [DataMember(Name="MainPicture", EmitDefaultValue=false)]
        public PictureModel MainPicture { get; set; }
        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name="HomePhone", EmitDefaultValue=false)]
        public string HomePhone { get; set; }
        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name="MobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets IsMainPastor
        /// </summary>
        [DataMember(Name="IsMainPastor", EmitDefaultValue=false)]
        public bool? IsMainPastor { get; set; }
        /// <summary>
        /// Gets or Sets AccountsId
        /// </summary>
        [DataMember(Name="AccountsId", EmitDefaultValue=false)]
        public Guid? AccountsId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PastorModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  MainPicture: ").Append(MainPicture).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsMainPastor: ").Append(IsMainPastor).Append("\n");
            sb.Append("  AccountsId: ").Append(AccountsId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PastorModel);
        }

        /// <summary>
        /// Returns true if PastorModel instances are equal
        /// </summary>
        /// <param name="other">Instance of PastorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PastorModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.MainPicture == other.MainPicture ||
                    this.MainPicture != null &&
                    this.MainPicture.Equals(other.MainPicture)
                ) && 
                (
                    this.HomePhone == other.HomePhone ||
                    this.HomePhone != null &&
                    this.HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    this.MobilePhone == other.MobilePhone ||
                    this.MobilePhone != null &&
                    this.MobilePhone.Equals(other.MobilePhone)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.IsMainPastor == other.IsMainPastor ||
                    this.IsMainPastor != null &&
                    this.IsMainPastor.Equals(other.IsMainPastor)
                ) && 
                (
                    this.AccountsId == other.AccountsId ||
                    this.AccountsId != null &&
                    this.AccountsId.Equals(other.AccountsId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.MainPicture != null)
                    hash = hash * 59 + this.MainPicture.GetHashCode();
                if (this.HomePhone != null)
                    hash = hash * 59 + this.HomePhone.GetHashCode();
                if (this.MobilePhone != null)
                    hash = hash * 59 + this.MobilePhone.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.IsMainPastor != null)
                    hash = hash * 59 + this.IsMainPastor.GetHashCode();
                if (this.AccountsId != null)
                    hash = hash * 59 + this.AccountsId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
